#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# vars
OVERWRITE="\e[1A\e[K"
INFO=" \033[1;34m\033[0m "
DONE=" \033[0;32m\033[0m "
ERROR=" \033[0;31m\033[0m "
WARNING=" \033[1;33m\033[0m "
ADD=" \033[0;34m\033[0m "
COMMIT=" \033[1;35m\033[0m "

# request user input to decide whether to push or not
get_input() {
    exec </dev/tty # open STDIN to read input

    # read user input
    while true; do
        # `read -p` doesn't support standard formatting. Use `$'...'` instead
        read -p $' \033[1;36m\033[0m  Do you wish to commit and push automagically? (Y/n) ' yn

        # accept blank input as "yes"
        if [ "$yn" = "" ]; then
            yn="Y"
        fi

        # check input
        case "$yn" in
        [Yy])
            val=0
            ;;
        [Nn])
            val=1
            ;;
        *)
            printf "Please answer with \"Y\" or \"N\"."
            ;;
        esac
    done

    exec <&- # close STDIN
    return val
}

track_commmit() {
    value=get_input

    # check if user wants to track changes
    if [ $value -eq 0 ]; then
        printf "${ADD}  Tracking changes...\n"
        git add ./.vscode/*

        printf "${COMMIT}  Committing changes...\n"
        git commit -m "feat(vscde) :robot:  update \`./.vscode/*\`"

    elif [ $value -eq 1 ]; then
        printf "${ERROR} Exiting...\n"
    fi

    return
}

# check if files inside .vscode/ have been updated
check_diff() {
    # check if .vscode/ has been updated
    printf "\n${INFO} Checking for updates to .vscode/*\n"

    if git diff --exit-code --quiet .vscode/*; then
        printf "${DONE} No updates detected!\n"
    else
        printf "${WARNING} Updates detected!\n"
        track_commmit
    fi
}

# generate automatically a changelog
generate_changelog() {
    printf "\n${INFO} Generating changelog...\n"
    git-cliff.exe --output ./CHANGELOG.md

    # track and commit changes
    printf "${ADD} Tracking changes...\n"
    git add ./CHANGELOG.md

    printf "${COMMIT} Committing changes...\n"
    git commit -m "docs(changelog) :robot:  update \`./CHANGELOG.md\`"

    return
}

# check if user can push
can_push() {
    # check if user can push
    # printf "\n${INFO} Checking if you can push...\n"

    if ! [ git push --dry-run --quiet ]; then
        printf "${ERROR} There is nothing to push!\n"
        return
    fi

}

main() {
    check_diff
    generate_changelog
    can_push
}

main
