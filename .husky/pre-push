#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# vars
OVERWRITE="\e[1A\e[K"
INFO=" \033[1;34m\033[0m "
CHECK_MARK=" \033[0;32m\033[0m "
CROSS_MARK=" \033[0;31m\033[0m "
WARNING=" \033[1;33m\033[0m "
ADD_MARK=" \033[0;34m\033[0m "
COMMIT_MARK=" \033[1;35m\033[0m "

# get user input to decide whether to push even if file differs
push_or_stop() {
    exec </dev/tty # open STDIN to read input

    # read user input
    while true; do
        # `read -p` does not support standard formatting. Use `$"..."`
        read -p $' \033[1;36m\033[0m  Do you wish to commit and push automatically? (Y/n) ' yn

        # Blank input == allow push
        if [ "$yn" = "" ]; then
            yn="Y"
        fi

        # check input
        case "$yn" in
        [Yy])
            printf "${ADD_MARK}  Tracking changes\n" &&
                git add .vscode/*

            printf "${COMMIT_MARK}  Committing changes\n" &&
                git commit -m "feat(auto) :gear:  update .vscode/\n"

            return
            ;;
        [Nn])
            printf "${CROSS_MARK} Exiting\n" # Denying push, throw error
            exit 126                         # "command not executable"
            ;;
        *)
            echo "Please answer \"Y\" or \"N\"."
            ;;
        esac
    done

    exec <&- # close STDIN
}

# check if files inside .vscode/ have been updated
check_diff() {
    # check if .vscode/ has been updated
    printf "\n${INFO} Checking for updates to .vscode/*\n"

    if git diff --exit-code --quiet .vscode/*; then
        printf "${CHECK_MARK} No updates detected!\n"
    else
        printf "${WARNING} Updates detected!\n"
        push_or_stop
    fi
    return
}

main() {
    # check if files inside .vscode/ have been updated
    check_diff
    return
}

main

exit 1
